import logging
import os
from typing import List
import requests
from pymilvus import MilvusClient
from openai import OpenAI
from dotenv import load_dotenv



def milvus_connect():
    host = os.getenv("MILVUS_HOST")
    port = os.getenv("MILVUS_PORT")
    user = 'root'

    milvus_client = MilvusClient(
        uri=f"http://{host}:{port}",
        token=f"{user}:",
        db_name='data_ugc')
    return milvus_client


def embed_text(text_list: str):
    # client = OpenAI(
    #     base_url='http://192.168.20.40:11434/v1',
    #     api_key='ollama',  # required, but unused
    # )
    # embeddings = client.embeddings.create(
    #     model='bge-m3',
    #     input=[text_list],
    # )
    # return embeddings.data[0].embedding

    load_dotenv(".env")
    api_key = os.getenv("DASHSCOPE_API_KEY")
    client = OpenAI(
        api_key=api_key,  # 如果您没有配置环境变量，请在此处用您的API Key进行替换
        base_url="https://dashscope.aliyuncs.com/compatible-mode/v1"  # 百炼服务的base_url
    )

    completion = client.embeddings.create(
        model="text-embedding-v4",
        input=[text_list],
        dimensions=1024,
        encoding_format="float"

    )
    print(completion.data)
    return completion.data[0].embedding


def milvus_filter(filters: dict):
    """
    :param filters:  ex: filters = {
                         'src':'dcd',
                         'stype':'bbs',
                         'car':10001,
                         'content': '油耗',
                         'labels':{},
                         'chunk_labels':{},
                         'time':1233123, 121344221
            }
    :return:
    """
    sqls = []
    for key, value in filters.items():
        if not value:
            continue
        if key == "src":
            sqls.append(f"embedding_src == '{filters['src']}'")
        elif key == "stype":
            sqls.append(f"embedding_stype == '{filters['stype']}'")
        elif key == "car":
            value = filters['car']
            if isinstance(value, tuple):
                for i in value:
                    sqls.append(f"embedding_sid == {i}")
            else:
                sqls.append(f"embedding_sid == {value}")
        elif key == "content":
            value = filters['content']
            if isinstance(value, tuple):
                for i in value:
                    sqls.append(f"embedding_content like '%{i}%'")
            else:
                sqls.append(f"embedding_content like '%{value}%'")
        elif key == "time":
            start, end = filters['time']
            sqls.append(f"embedding_pubtime >= {start} and embedding_pubtime <= {end}")
        elif key == "labels":
            values = filters['labels']
            if isinstance(values, tuple):
                for value in values:
                    k = value['key']
                    start, end = value['value']
                    sqls.append(f"embedding_ugc_labels['{k}'] >= {start} and embedding_ugc_labels['{k}'] <= {end}")
            else:
                k = values['key']
                start, end = values['value']
                sqls.append(f"embedding_ugc_labels['{k}'] >= {start} and embedding_ugc_labels['{k}'] <= {end}")
        elif key == "chunk_labels":
            values = filters['chunk_labels']
            if isinstance(values, tuple):
                for value in values:
                    k = value['key']
                    start, end = value['value']
                    sqls.append(f"embedding_labels['{k}'] >= {start} and embedding_labels['{k}'] <= {end}")
            else:
                k = values['key']
                start, end = values['value']
                sqls.append(f"embedding_labels['{k}'] >= {start} and embedding_labels['{k}'] <= {end}")
    sql = " and ".join(sqls)
    return sql


def search_milvus(query_text: str, filters: dict, top_k: int):

    milvus_client = milvus_connect()

    query_vector = embed_text(query_text)   # 被占用啦
    # print(1111, query_vector)
    # query_vector = [-0.0282644, -0.024170808, -0.018975504, -0.03164402, -0.06463392, -0.046478555, 0.024977643, 0.029788658, -0.00829069, -0.009118671, 0.0071453517, 0.02811591, 0.018977838, -0.0014807301, -0.022459447, -0.048977938, -0.012060347, 0.011477075, -0.03976686, -0.05830107, 0.06375598, -0.012188432, 0.010334543, 0.034601983, 0.020886498, 0.004948031, -0.025092274, -0.015805189, 0.027493471, 0.024433037, -0.03315158, 0.019519547, -0.033452746, -0.0125816725, -0.03915646, -0.023202555, 9.504562e-05, -0.006543816, -0.042018883, 0.036325544, 0.019936517, -0.04947943, 0.030600395, 0.0017084453, -0.01951026, -0.03056206, -0.017246814, -0.01497645, -0.021531336, -0.039025977, -0.0020846985, -0.018288767, 0.06752934, -0.007856268, 0.08300615, 0.046026696, 0.032158162, -0.020368896, -0.04905796, 0.020003755, -0.03390137, 0.025052752, 0.00058778364, -0.01793087, -0.030278519, 0.063842066, 0.0035347452, -0.008808372, -0.013473455, -0.034119554, -0.03379051, -0.022445524, 0.0028074828, -0.015209193, -0.012124868, 0.010069895, 0.02571609, 0.0072342176, 0.004536686, 0.0022650703, 0.047838528, 0.004401366, 0.01061217, 0.0064705797, -0.021144085, 0.028238302, -0.018118812, -0.01178867, -0.015752189, -0.024750996, -0.002963842, -0.02082333, -0.0055278274, -0.001669818, -0.020291807, 0.051104546, -0.019396799, 0.018891035, 0.026133643, 0.0042030527, 0.010259397, -0.027324887, 0.01895628, -0.03683885, -0.031713706, -0.026838966, 0.03359101, 0.006078209, -0.0302827, -0.0049821343, 0.021040782, -0.011418158, 0.014663213, 0.0210478, -0.01726298, 0.024502054, -0.062429633, -0.007918213, 0.02727489, -0.031205408, 0.021700537, 0.0028736661, 0.05751583, -0.008303392, 0.0060046455, -0.055206347, 0.008329197, 0.05438002, 0.0133021055, 0.0009361323, -0.011695787, -0.00033608152, -0.08397151, 0.002873236, -0.023851767, -0.025811862, 0.08714596, -0.02296346, 0.0041450593, -0.030902844, -0.023687072, 0.014231611, -0.025787216, -0.051124953, -0.023242367, 0.00660054, -0.006067132, -0.019443722, 0.015558481, -0.01870306, 0.04776259, 0.0112390015, -0.023751235, 0.041912604, -0.044622574, 0.01169644, 0.013033742, 0.086529255, -0.062107082, 0.0019007128, 0.0062170806, -0.024533056, 0.0021458305, -0.030577458, 0.027181042, 0.02992773, 0.00796401, 0.010151674, -0.014458821, 0.037467122, 0.012425588, -0.016897684, 0.042911574, 0.0005669822, -0.01522819, 0.013800514, 0.0728333, -0.0010969238, -0.0027499185, -0.01616845, -0.021435779, -0.0034169827, 0.025753718, -0.037246134, -0.034368794, 0.058933664, 0.058697548, -0.04359296, -0.007894549, 0.042401776, -0.043337196, -0.019206895, -0.019118583, 0.0075422768, 0.04079066, 0.01632467, 0.02266503, 0.022120453, -0.0185773, -0.008835953, -0.02274836, -0.019832948, 0.017104985, 0.024432832, -0.02737665, -0.0114629, 0.028641187, -0.0052214623, -0.026280448, -0.08718608, -0.0015332123, -0.05720541, -0.0071441615, 0.023502963, 0.0052472395, -0.02874028, -0.004678342, -0.015704703, 0.033253495, 0.0042807525, -0.0023500563, 0.02852327, -0.001437699, -0.055022195, 0.016298223, -0.039599575, 0.0065781195, 0.06839349, -0.04358544, -0.0364595, 0.018048268, 0.022975562, -0.017164988, -0.015279117, 0.015052549, -0.023846192, 0.02040583, 0.04566565, 0.041835703, 0.033875976, 0.03487233, -0.008260229, -0.016057841, -0.0022602356, 0.026389306, 0.013904489, -0.007034046, 0.026509017, -0.034382656, 0.0043698633, 0.0018754727, -0.033031303, -0.08631986, 0.002512739, -0.061559062, 0.051301777, -0.013099035, 0.00791998, 0.0028528152, 0.00280992, -0.018490829, 0.011251367, 0.023104316, 0.034303226, -0.010867796, 0.011785179, 0.020473132, 0.004543678, -0.028099343, 0.015917426, -0.010039799, -0.037668046, 0.014215429, 0.024895752, -0.0011441216, -0.0040850462, -0.010203015, 0.021813903, 0.05666528, -0.02267137, 0.073629774, -0.02006586, -0.0016543979, -0.039373443, 0.041834038, -0.056648783, -0.006572518, 0.05251096, 0.024966534, -0.046924163, -0.0046163145, 0.013277318, 0.06801381, -0.03621272, 0.00087343465, 0.03659668, -0.015131206, -0.15815127, -0.011352073, 0.01850995, -0.0013711882, 0.003981612, -0.029034203, -0.024201052, -0.037246816, -0.04584363, 0.056785516, -0.014675198, -0.043014813, -0.04346345, -0.043591537, -0.025542134, -0.012132873, -0.022941096, 0.018417962, 0.011036719, -0.031368315, 0.019686243, -0.002150166, 0.07070279, -0.04371473, -0.071568236, 0.018068168, 0.007688404, -0.001157473, -0.034677677, 0.009983076, -0.011803222, 0.0531829, -0.011366852, 0.029586034, 0.03679883, 0.0010091333, 0.019534515, 0.019463299, 0.0011494956, 0.023169283, 0.010304582, 0.0274716, -0.039529115, 0.009119338, -0.01595619, -0.036212098, 0.01957184, 0.0099219475, -0.016066514, -0.008640213, 0.05545825, 0.009131177, -0.0044299294, 0.018963598, -0.02722235, 0.042405576, 0.047329985, 0.049234156, 0.055124052, -0.0014737179, -0.0301875, 0.009950826, -0.0014510086, 0.046416916, -0.038312964, -0.008509205, 0.034261238, 0.00043127412, 0.007629809, -0.044928253, 0.018529212, -0.035305, 0.02220161, 0.0057686707, 0.0075568613, 0.020106522, -0.05475255, -0.05619025, 0.0006089909, -0.12563394, -0.005849078, 0.039798047, 0.007382973, -0.006094885, -0.01844729, -0.016209228, 0.017193982, -0.008624689, 0.030574765, 0.24687102, -0.030649055, -0.0022662343, 0.003625183, -0.012272279, -0.00071017543, -0.010590138, 0.022461768, -0.003413845, -0.032380346, -0.056410067, -0.007383664, 0.010022258, -0.00067366334, 0.007068268, 0.018407065, 0.024738023, 0.032785963, 0.07371633, 0.031631038, -0.003924853, -0.018894864, -0.019752981, 0.014326473, -0.02782169, -0.034831263, -0.009825118, -0.004700752, 0.043877356, 0.006341434, 0.018796703, -0.018183481, 0.027094532, -0.032319125, -0.027019314, 0.064093605, 0.046603248, 0.023683012, 0.005137459, 0.017888356, -0.06667207, -0.007149437, 0.013396296, 0.016845318, 0.030858304, -0.028125314, -0.040471796, -0.0053177616, -0.020638239, 0.015929593, 0.00358292, 0.05669165, -0.0008351386, -0.026845062, 0.0008700534, -0.04656541, -0.015227193, 0.019682674, -0.016325103, 0.057726044, 0.02810837, 0.014990567, -0.044143364, 0.017979085, 0.024979679, 0.02801374, -0.020296987, 0.010488016, 0.019464938, 0.043063045, 0.0009021424, 0.019416124, -0.01963286, -0.024377516, 0.022911232, 0.009744224, -0.011604921, 0.056273706, -0.0028415201, -0.0076284525, -0.039907143, -0.049211457, -0.08399218, -0.0054194164, 0.013027346, -0.011393234, 0.029139418, 0.012796524, -0.011249924, -0.023641713, -0.004224858, 0.011811937, 0.00964925, -0.06361008, 0.007363269, 0.007634091, -0.014595285, -0.022949638, 0.0008058248, -0.001343477, -0.029741583, -0.027281035, 0.027672512, 0.0009243435, -0.04077175, 0.0015784438, 0.011230253, 0.011805874, -0.008760727, 0.024923537, 0.014604858, 0.0041228984, -0.013910684, -0.05776272, 0.0029542483, -0.026685346, 0.011079417, 0.043315142, 0.014184814, 0.03493432, -0.022319483, -0.07159191, -0.009823159, -0.039793205, -0.05193461, -0.020597458, 0.0014502784, -
    #                 0.044788428, 0.031529922, 0.00053732377, 0.003029022, -0.018287202, -0.009822595, 0.0058103143, 0.050396614, 0.016896496, 0.043419298, 0.029963844, 0.028996943, 0.018763812, -0.0021501933, -0.03131509, -0.030891847, -0.045248996, -0.021060728, -0.030326795, -0.00965831, 0.033161946, -0.016882481, -0.019764857, 0.018891448, 0.07702639, 0.021668764, -0.06656343, -0.0029327779, -0.0657911, -0.02410576, 0.008946079, -0.013944471, -0.028197324, 0.0014123933, -0.017767344, -0.029839663, 0.06484223, 0.067097485, 0.013928481, 0.024721107, 0.0047805877, 0.019905124, 0.02325091, 0.020074937, -0.019609539, -0.016429445, -0.041744888, -0.009597723, 0.03250554, 0.025068814, -0.00042970895, -0.012488932, 0.037576377, 0.026575668, -0.006920529, 0.062125795, -0.01245726, -0.0043525803, 0.012746247, -0.010009425, -0.0041960394, 0.010637593, -0.007409432, -0.028848344, 0.06238067, -0.0101983985, -0.009908179, 0.01089044, -0.023137394, 0.006117292, 0.0009105034, -0.016737357, -0.030962678, 0.005783885, 0.007754172, 0.030063188, 0.041686643, 0.010486399, -0.028148536, 0.009621542, -0.025221983, -0.018333215, 0.016837835, -0.02168374, -0.009716946, -0.0044987467, 0.0231115, -0.063119285, -0.016156815, -0.01019025, -0.022653116, -0.03767171, -0.045331966, -0.0048014307, 0.013770833, 0.057008468, -0.040205456, -0.0019367255, 0.031233056, -0.007375382, -0.014507649, 0.04240594, 0.019174932, 0.0036651527, -0.018176667, 0.026685504, -0.0357483, 0.011631617, -0.0305118, 0.028504204, 0.023785267, -0.030725984, 0.0033357167, 0.02005457, -0.043043923, -0.0059847855, 0.034432497, -0.03874185, -0.0015111881, -0.01608987, 0.031006271, 0.034614697, 0.0132221375, -0.016641933, 0.076045714, 0.039752565, 0.045415595, 0.015711335, 0.045139566, -0.007165792, 0.012759892, -0.03304649, -0.004669441, -0.031163486, 0.031094491, -0.027380606, 0.014332697, -0.008620005, -0.039967254, 0.0066505685, 0.039256062, 0.00026935042, -0.082840845, -0.045001715, 0.004911068, -0.009464845, -0.010694497, 0.063133284, 0.047071848, -0.033283107, -0.041527685, 0.030636586, 0.01793823, -0.004288992, 0.06933949, 0.03966474, 0.019458171, -0.019555526, -0.022202795, 0.001448171, 0.0089227725, 0.0056501166, -0.00783108, 0.013505748, 0.0013551967, -0.02159643, 0.018239167, -0.021741137, 0.0007101947, -0.044042, 0.014065212, -0.013484441, 0.007881514, -0.008603477, -0.0040037036, -0.037572883, -0.03333136, -0.053147927, -0.016419513, -0.05156925, 0.0023501704, 0.024384012, 0.05093344, -0.032883033, -0.00417859, 0.030702425, -0.011590217, -0.013421206, -0.0077768364, 0.03425911, -0.035051476, -0.005691084, 0.031146863, -0.0039031147, -0.035912946, -0.0032125586, 0.032564413, -0.016373727, 0.043894578, -0.038727496, 0.021669997, -0.013459754, 0.003187137, 0.015264935, -0.011232616, -0.038756903, -0.040089328, 0.072096474, 0.0151548935, 8.658759e-05, 0.0063451435, 0.025374623, 0.0038552159, -0.0009195713, 0.020820817, 0.04432306, 0.0022826402, 0.0075411103, -0.023628877, 0.032532062, -0.009894518, 0.0009592547, 0.030226732, 0.016831793, 0.0463302, -0.031438127, -0.069676705, 0.0033997707, -0.06872366, -0.0041154376, -0.013362342, 0.055932455, 0.0059463624, 0.028605286, 0.03015058, -0.009951443, 0.04740451, -0.028725939, 0.02534235, 0.060977273, -0.0011648759, 0.03550839, 0.033471897, -0.037210476, 0.013517042, 0.05371292, -0.0032356165, 0.004672956, 0.035925843, 0.022581844, -0.0144487135, 0.018292896, 0.0085823955, -0.0010517397, -0.037966657, -0.028496193, -0.020329708, 0.065347254, -0.04714695, 0.00042061505, 0.020620815, 0.037077148, 0.0034956494, -0.008063325, -0.004485409, -0.05449948, 0.0049071577, -0.15107968, 0.037024718, -0.022874951, -0.030312117, -0.01913211, 0.025133317, -0.019568505, -0.018128274, -0.004119673, -0.02675532, -0.016464481, -0.065459445, 0.070508555, -0.0048319628, -0.010957395, 0.036738697, -0.020975798, -0.032156046, 0.008191173, 0.016603647, -0.011790422, -0.027025461, 0.013261171, -0.027981512, -0.025093602, 0.010466602, 0.020583441, -0.0072694034, -0.012299985, -0.0063163303, 0.020908365, -0.025502145, -0.008649114, 0.06271288, -0.008011386, 0.009506135, 0.0047907834, -0.021756241, 0.003041674, 0.014319482, -0.00014844495, 0.016319182, 0.005729442, -0.0134038115, 0.05541612, 0.031310186, -0.0407027, -0.024184763, -0.032012135, 0.0066988254, -0.023492716, -0.0077886432, 0.058057327, 0.025978198, -0.008789074, -0.004256175, -0.032606587, -0.021510974, -0.0191566, 0.004057852, -0.010940106, 0.018833697, -0.02952894, -0.04569843, -0.031232385, 0.013313303, -0.072409555, -0.0063135764, 0.020153558, -0.021316156, -0.013506827, -0.009682631, 0.034261994, 0.008227276, -0.0048833806, -0.0037533932, 0.074955866, -0.029751977, -0.035863224, -0.016450513, -0.0045827916, 0.02453257, 0.015278622, 0.03920143, 0.042650457, 0.016142642, -0.031414837, 0.003487257, -0.043471083, 0.010859234, -0.034060277, 0.0068640932, -0.010366412, 0.0011614733, -0.0061249672, -0.03148236, -0.026221571, 0.0032124538, -0.01940792, -0.026787378, 0.020981222, -0.008684839, 0.035426047, 0.0021520692, -0.05762104, -0.03661131, 0.026033817, 0.025224768, 7.855873e-05, -0.013101812, -0.006199638, -0.015003235, -0.032346226, -0.030790586, 0.0023515346, 0.0048359474, -0.039977264, -0.03740826, -0.020887833, -0.012838132, -0.0011532822, 0.014658498, 0.011611172, -0.02257905, -0.031716857, -0.02099628, 0.04739917, -0.026867434, -0.025591603, -0.023301361, -0.0024521076, -0.004510406, -0.01648688, -0.002953841, 0.009201306, 0.02195324, -0.04601636, 0.044245772, 0.034276746, -0.01709967, -0.014464664, 0.019427914, -0.011551088, -0.008109945, 0.017185569, -0.025300264, 0.03349747, -0.023540484, 0.020096267, -0.006885601, 0.034498814, 0.028185518, -0.015504552, 0.00016819173, -0.041377816, -0.0015398507, 0.007293079, -0.0001787204, 0.030102842, 0.013877536, -0.0005702504, -0.091669366, -0.00872646, -0.045074005, 0.019297732, 0.047650788, 0.0068134717, 0.027312428, -0.01737668, 0.0029083865, -0.042874735, 0.053912163, -0.028963303, 0.047047414, -0.0030112844, -0.014860085, 0.037348665, 0.024331158, 0.03369397, 0.010090261, -0.016257217, 0.028111821, 0.025683952, -0.0073053725, 0.0089585325, 0.018888207, 0.023205493, 0.009100067, 0.028726695, 0.0024675217, -0.01708273, -0.039644565, -0.032606546, -0.05177038, 0.0067157564, -0.039702848, 0.01678068, 0.020617325, 0.013793012, 0.054008722, 0.030878952, -0.006026997, 0.019075789, -0.023521112, -0.0009130604, -0.027808582, 0.051172785, 0.022507086, -0.02986762, -0.008353675, 0.0076292777, -0.023411142, 0.017944764, 0.010385321, 0.009796668, 0.0018682529, 0.017106747, -0.016436124, 0.01841794, 0.01811516, -0.010695884, -0.023263555, -0.006547999, -0.0070639174, 0.014514015, -0.05973916, -0.02208181, 0.004606497, -0.0022085942, -0.05717888, 0.00586336, 0.038404115, -0.021276139, 0.035968248, 0.0051686647, -0.0015138082, -0.0008696036, 0.020185597, 0.041244127, -0.04577671, 0.023524536, 0.037831686, -0.028752042, 0.009377163]

    filters_query = milvus_filter(filters)
    res = milvus_client.search(
        collection_name="ugc_embedding_data_qwen",
        data=[query_vector],
        anns_field="embedding_dense",
        filter=filters_query,
        search_params={"metric_type": "L2"},
        limit=int(top_k),
        output_fields=['embedding_content']
    )
    chunks = []
    chunks_content = []
    for hits in res:
        for hit in hits:
            chunks.append({'id': int(hit['embedding_id']),
                           'content': hit['entity']['embedding_content']})
            chunks_content.append(hit['entity']['embedding_content'])
    return chunks


def rerank(query_text: str, chunks: List[dict], top_k: int, score: tuple = None):

    doc_ids = [chunk.get('id') for chunk in chunks]
    doc_list = [chunk.get('content') for chunk in chunks]
    url = "http://192.168.20.60:8000/v1/rerank"
    data = {
        "model": "BAAI/bge-reranker-v2-m3",
        "query": query_text,
        "documents": doc_list,
        "top_n": int(top_k),
        "truncate_prompt_tokens": 1,
        "additional_data": "string",
        "priority": 0,
        "additionalProp1": {}
    }
    data = requests.post(url=url, json=data).json()
    results = data.get('results')
    rerank_data = {}
    if results:
        for result in results:
            doc_id = doc_ids[result['index']]
            relevance_score = result['relevance_score']
            if score:
                min_score, max_score = score
                if relevance_score < float(min_score) or relevance_score > float(max_score):
                    continue
            rerank_data[doc_id] = relevance_score

    return rerank_data


def sem_search(query_text: str, filters: dict, embed_top_k: int, rerank_top_k: int, score: tuple = None):

    chunks = search_milvus(query_text, filters, embed_top_k)
    print(chunks)
    # rerank_data = rerank(query_text, chunks, rerank_top_k, score)

    # return rerank_data

if __name__ == '__main__':
    query = "特斯拉的空间"
    sem_search(query, {}, 10, 10)